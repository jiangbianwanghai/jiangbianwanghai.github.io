<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在Centos7下安装PHP8</title>
    <url>/install-php8-0-8-in-centos7/</url>
    <content><![CDATA[<blockquote>
<p>安装PHP的逻辑很简单。下载压缩包，解压，生成Makefile文件并安装</p>
</blockquote>
<p><strong>系统环境如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ cat /proc/version</span><br><span class="line">Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu Nov 19 22:10:57 UTC 2015</span><br><span class="line">➜  ~ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure>

<p>安装php-8.0.8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://www.php.net/distributions/php-8.0.8.tar.gz</span><br><span class="line">tar -zxvf php-8.0.8.tar.gz</span><br><span class="line">cd php-8.0.8</span><br><span class="line">#编译Makefile并开启一些必要的插件</span><br><span class="line">./configure --prefix=/usr/local/php-8.0.8 --with-mysqli --with-pdo-mysql --with-zlib --enable-simplexml --enable-xml --disable-rpath --enable-bcmath --enable-soap --with-curl --enable-fpm --with-fpm-user=nobody --with-fpm-group=nobody --enable-mbstring --enable-sockets --with-openssl --with-mhash --enable-opcache --disable-fileinfo –-with-readline</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">#创建软连接</span><br><span class="line">cd /usr/local</span><br><span class="line">ln -s /usr/local/php-8.0.8 php</span><br><span class="line"></span><br><span class="line">查看版本</span><br><span class="line">php -v</span><br><span class="line"></span><br><span class="line">#copy配置文件</span><br><span class="line">cp php.ini-development /usr/local/php-8.0.8/lib/php.ini</span><br><span class="line"></span><br><span class="line">#启动fpm前的准备</span><br><span class="line">cp /usr/local/php-8.0.8/etc/php-fpm.conf.default /usr/local/php-8.0.8/etc/php-fpm.conf</span><br><span class="line">cd /usr/local/php-8.0.8/etc/php-fpm.d</span><br><span class="line">cp www.conf.default www.conf</span><br><span class="line"></span><br><span class="line">#启动fpm</span><br><span class="line">/usr/local/php/sbin/php-fpm</span><br><span class="line"></span><br><span class="line">#查看fpm是否启动</span><br><span class="line">netstat -tunlp |grep 9000</span><br></pre></td></tr></table></figure>

<p>nginx配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  192.168.8.*;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root html;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决No package ‘oniguruma’ found</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/kkos/oniguruma </span><br><span class="line">cd oniguruma</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr --libdir=/lib64</span><br><span class="line">make &amp;&amp; make instal</span><br></pre></td></tr></table></figure>

<p>安转readline</p>
<p>经常会需要在命令行验证一些代码片段，所以让php支持readline对开发很重要。默认php是不安装的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看readline是否安装</span><br><span class="line">php -m | grep -i readline</span><br><span class="line">如果没有安装</span><br><span class="line">cd /root/php-8.0.8/ext/readline</span><br><span class="line">/usr/local/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config --with-readline</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">vim /usr/local/php/lib/php.ini</span><br><span class="line">在最后面添加一行</span><br><span class="line">extension=readline.so</span><br></pre></td></tr></table></figure>

<p><strong>参考</strong></p>
<ol>
<li><a href="https://blog.csdn.net/shachao888/article/details/108167214">安装PHP7.4找不到包 No package ‘oniguruma‘ found错误</a></li>
</ol>
]]></content>
      <tags>
        <tag>php8</tag>
        <tag>centos7</tag>
        <tag>源码安装</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos7下安装php的扩展v8js</title>
    <url>/install-v8js-in-centos7/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<p>最近，我们小组在做一个网页可视化的项目——就是通过拖拽组件，设置属性、参数的方式快速的生成 <code>web页面</code>。客户在后台设置完成后，会将各个组件的属性和参数存储到数据库中，后端程序从数据库中读取数据并动态的拼接 <code>css</code> 和 <code>html</code> 代码完成页面的渲染工作。因此，需要根据预先设定的规则做计算。</p>
<p><strong>后台编辑时呈现的可视化</strong>是前端同事通过编写大量 <code>js</code> 的 <code>function</code> 完成 css 和 html 的计算和渲染。而后端如果需要渲染这些数据，则需要将他们写的前端代码逻辑在 <code>php</code> 中重新编写一遍。（目前，我们是这样做的）</p>
<p>那么，有没有一种解决方案，直接使用前端同事编写好的 js 脚本呢？</p>
<p>如果有可以极大的提高我们的开发效率和提升整个项目的稳定性。至少它可以解决以下三个问题：</p>
<ol>
<li>保持前端代码的一致性。只需要执行前端人员编写的 js 脚本即可，无需再通过 php 转换一遍；</li>
<li>减少后端人员开发工作量。不需要再通过 php 转换一遍，节省下来的时间是非常可观的；</li>
<li>代码更加稳定。后面如果前端的 function 有任何变动也不用再通知后端人员做代码同步了。</li>
</ol>
<p>经过调研，<a href="https://github.com/phpv8/v8js">V8JS</a> 进入了我们的视野。它是 php 的一个扩展，可以在 php 中直接执行 js 代码并获得结果。经过下面一系列的安装和测试，有一些体会记录如下：</p>
<p>V8JS 实际上是一个 php 与 <code>v8</code> 之间搭建的桥梁，它最终会将 js 代码提交给 v8 来执行。由于 v8 是谷歌团队开发的浏览器引擎，安装过程中需要访问谷歌的相关地址，所以尽量用一台能够访问外网的机器来安装。如果要用国内的机器，则需要配置科学上网的VPN。</p>
<p><code>Centos7</code> 默认的 <code>gcc</code> 版本是 <code>4.8.5</code>，不能满足 v8 编译的需求。需要先升级gcc（这个升级过程非常耗时）之后下载谷歌自家的 <code>depot_tools</code> 用来拉取 v8 源码（由于谷歌为自家产品推广的考虑，虽然有些繁琐，但这种方式也是现在唯一的获取v8最新代码的方式）。经测试，编译 v8 是非常耗时的。最后，只要 v8 安装成功了，剩下 <code>v8js</code> 的安装就比较容易了，它跟编译 php 的其他扩展没有什么不同。</p>
<hr>
<p>下面是整个安装和测试过程</p>
<p><strong>〇、安装测试环境如下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">硬件</span><br><span class="line">Linode 1核1.8G的VPS</span><br><span class="line"></span><br><span class="line">软件</span><br><span class="line">[root@li1594-191 ~]# cat /proc/version</span><br><span class="line">Linux version 3.10.0-1160.15.2.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Wed Feb 3 15:06:38 UTC 2021</span><br><span class="line">[root@li1594-191 ~]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br></pre></td></tr></table></figure>

<p><strong>一、启动screen</strong></p>
<p>当想要一个命令或者操作一直运行下去，但是你直接在终端里面执行的话，这个终端退出后命令就无法再去接着执行了，也无法看到这个命令操作的状态，这个时候可以用到screen</p>
<p>强烈建议在开始安装之前先启动屏幕会话，因为后面的一些编译非常耗时。运行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建utf8编码模式的新会话gcc</span></span><br><span class="line">screen -U -S gcc</span><br></pre></td></tr></table></figure>

<p><strong>二、查看本机的gcc版本并安装指定版本的gcc</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载压缩包</span></span><br><span class="line">cd /tmp</span><br><span class="line">wget https://mirrors.ustc.edu.cn/gnu/gcc/gcc-7.5.0/gcc-7.5.0.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -xzvf gcc-7.5.0.tar.gz</span><br><span class="line">cd gcc-7.5.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载供编译需求的依赖项</span></span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">建立一个文件夹存放编译文件</span></span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成 Makefile 文件</span></span><br><span class="line">../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br><span class="line">make -j4 &amp;&amp; make install</span><br><span class="line">注：这个过程非常耗时</span><br><span class="line"></span><br><span class="line">-------------分割线-------------</span><br><span class="line"></span><br><span class="line">下面是将gcc最新版本的动态库替换系统中老版本的动态库</span><br><span class="line"></span><br><span class="line">查找编译gcc时生成的最新动态库</span><br><span class="line">find / -name &quot;libstdc++.so*&quot;</span><br><span class="line"></span><br><span class="line">将找到的动态库libstdc++.so.6.0.21复制到/usr/lib64</span><br><span class="line">cp /tmp/gcc-7.5.0/build/stage1-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.24 /usr/lib64</span><br><span class="line"></span><br><span class="line">切换工作目录至/usr/lib64，删除原来的软连接， 将默认库的软连接指向最新动态库。</span><br><span class="line">cd /usr/lib64</span><br><span class="line">rm -rf libstdc++.so.6</span><br><span class="line">ln -s libstdc++.so.6.0.24 libstdc++.so.6</span><br><span class="line"></span><br><span class="line">-------------分割线-------------</span><br><span class="line"></span><br><span class="line">[root@li1594-191 ~]# gcc -v</span><br><span class="line">使用内建 specs。</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/local/libexec/gcc/x86_64-pc-linux-gnu/7.5.0/lto-wrapper</span><br><span class="line">目标：x86_64-pc-linux-gnu</span><br><span class="line">配置为：../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</span><br><span class="line">线程模型：posix</span><br><span class="line">gcc 版本 7.5.0 (GCC)</span><br></pre></td></tr></table></figure>

<p><strong>三、安装v8</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果没有安装git，需要先安装</span></span><br><span class="line">yum install git</span><br><span class="line"></span><br><span class="line">cd /tmp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> depot_tools安装</span></span><br><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">export PATH=`pwd`/depot_tools:&quot;$PATH&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 v8 这一步很慢</span></span><br><span class="line">fetch v8</span><br><span class="line">cd v8</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择你想编译的版本</span></span><br><span class="line">git checkout 7.5.288.23</span><br><span class="line">gclient sync</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Setup GN</span></span><br><span class="line">tools/dev/v8gen.py -vv x64.release -- is_component_build=true use_custom_libcxx=false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始编译 这一步很慢</span></span><br><span class="line">ninja -C out.gn/x64.release/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install to /opt/v8/</span></span><br><span class="line">mkdir -p /opt/v8/&#123;lib,include&#125;</span><br><span class="line">cp out.gn/x64.release/lib*.so out.gn/x64.release/*_blob.bin \</span><br><span class="line">  out.gn/x64.release/icudtl.dat /opt/v8/lib/</span><br><span class="line">cp -R include/* /opt/v8/include/</span><br></pre></td></tr></table></figure>

<p><strong>四、安装php（这里用的是7.2.33)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -c https://www.php.net/distributions/php-7.2.33.tar.gz</span><br><span class="line">tar -zxvf php-7.2.33.tar.gz</span><br><span class="line">./configure --prefix=/usr/local/php7.2.33 --with-mysqli --with-pdo-mysql --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir --enable-simplexml --enable-xml --disable-rpath --enable-bcmath --enable-soap --enable-zip --with-curl --enable-fpm --with-fpm-user=nobody --with-fpm-group=nobody --enable-mbstring --enable-sockets --with-gd --with-openssl --with-mhash --enable-opcache --disable-fileinfo</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cp php.ini-development /usr/local/php7.2.33/lib/php.ini</span><br><span class="line">cd /usr/local</span><br><span class="line">ln -s /usr/local/php7.2.33 php</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line">export PATH=$PATH:/usr/local/php/bin</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p><strong>五、安装v8js</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">git clone https://github.com/phpv8/v8js.git</span><br><span class="line"></span><br><span class="line">cd v8js</span><br><span class="line">phpize</span><br><span class="line"></span><br><span class="line">./configure --with-v8js=/opt/v8 LDFLAGS=&quot;-lstdc++&quot; --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>六、初步测试一下</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$v8</span> = <span class="keyword">new</span> V8Js();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* basic.js */</span></span><br><span class="line"><span class="variable">$JS</span> = <span class="string">&lt;&lt;&lt; EOT</span></span><br><span class="line"><span class="string">len = print(&#x27;Hello&#x27; + &#x27; &#x27; + &#x27;World!&#x27; + &quot;\\n&quot;);</span></span><br><span class="line"><span class="string">len;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  var_dump(<span class="variable">$v8</span>-&gt;executeString(<span class="variable">$JS</span>, <span class="string">&#x27;basic.js&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (V8JsException <span class="variable">$e</span>) &#123;</span><br><span class="line">  var_dump(<span class="variable">$e</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>七、用我们的项目代码试一下</strong></p>
<p>zhangdan.js（下面三个 function 是可视化在用的前端代码）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[root@li1594-<span class="number">191</span> phptest]# cat zhangdan.js</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * image opacity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">prop</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>prefix 前缀，默认空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOpacity</span>(<span class="params">prop, prefix = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!prop) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">const</span> bt = prop[prefix + <span class="string">&#x27;bt&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> bo = prop[prefix + <span class="string">&#x27;bo&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bt === <span class="string">&#x27;image&#x27;</span> ? ((bo || <span class="number">100</span>) / <span class="number">100</span>) : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * image padding</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">prop</span></span></span></span><br><span class="line"><span class="comment"> * pdt padding type  &#x27;custom&#x27; | &#x27;default&#x27;</span></span><br><span class="line"><span class="comment"> * pt  padding top</span></span><br><span class="line"><span class="comment"> * pb  padding bottom</span></span><br><span class="line"><span class="comment"> * pl  padding left</span></span><br><span class="line"><span class="comment"> * pr  padding right</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPadding</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!prop) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; pdt, pt = <span class="number">0</span>, pb = <span class="number">0</span>, pl = <span class="number">0</span>, pr = <span class="number">0</span> &#125; = prop;</span><br><span class="line">  <span class="keyword">if</span> (pdt === <span class="string">&#x27;custom&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;pt&#125;</span>px <span class="subst">$&#123;pr&#125;</span>px <span class="subst">$&#123;pb&#125;</span>px <span class="subst">$&#123;pl&#125;</span>px`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * border</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> <span class="variable">prop</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBorder</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!prop) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; bdw, bds, bdc, btd &#125; = prop</span><br><span class="line">  <span class="keyword">const</span> width = bdw || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (btd &amp;&amp; btd === <span class="string">&#x27;default&#x27;</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;width&#125;</span>px <span class="subst">$&#123;bds&#125;</span> <span class="subst">$&#123;bdc&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算透明度</span></span><br><span class="line"><span class="keyword">var</span> jsonA = <span class="string">&#x27;&#123;&quot;bt&quot;:&quot;image&quot;, &quot;bo&quot;:&quot;123&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> jsa=<span class="built_in">JSON</span>.parse(jsonA);</span><br><span class="line">a =getOpacity(jsa);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算边距</span></span><br><span class="line"><span class="keyword">var</span> jsonB = <span class="string">&#x27;&#123;&quot;pdt&quot;:&quot;custom&quot;, &quot;pt&quot;: 5, &quot;pr&quot;: 6, &quot;pb&quot;: 7, &quot;pl&quot;: 8&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> jsb=<span class="built_in">JSON</span>.parse(jsonB);</span><br><span class="line">b = getPadding(jsb);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算边框</span></span><br><span class="line"><span class="keyword">var</span> jsonC = <span class="string">&#x27;&#123;&quot;bdw&quot;: 5, &quot;bds&quot;: &quot;solid&quot;, &quot;bdc&quot;:&quot;rgba(147, 42, 42, 1)&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> jsc=<span class="built_in">JSON</span>.parse(jsonC);</span><br><span class="line">c = getBorder(jsc);</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;透明度：&#x27;</span>+a+<span class="string">&#x27;边距：&#x27;</span>+b+<span class="string">&#x27;边框：&#x27;</span>+c</span><br></pre></td></tr></table></figure>

<p>zhangdan.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@li1594-<span class="number">191</span> phptest]<span class="comment"># cat zhangdan.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$v8</span> = <span class="keyword">new</span> V8Js();</span><br><span class="line"><span class="variable">$code</span> = file_get_contents(<span class="string">&#x27;zhangdan.js&#x27;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$res</span> = <span class="variable">$v8</span>-&gt;executeString(<span class="variable">$code</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$res</span>.PHP_EOL;</span><br><span class="line">&#125; <span class="keyword">catch</span> (V8JsException <span class="variable">$e</span>) &#123;</span><br><span class="line">  var_dump(<span class="variable">$e</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果（执行结果符合预期）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@li1594-191 phptest]# php zhangdan.php</span><br><span class="line">透明度：1.23边距：5px 6px 7px 8px边框：5px solid rgba(147, 42, 42, 1)</span><br><span class="line">[root@li1594-191 phptest]#</span><br></pre></td></tr></table></figure>

<p><strong>八、rpm方式安装v8</strong></p>
<p>鉴于上面第1-4步的源码安装难度很大，既需要外网的支持又需要升级gcc，在生产环境部署时可能会有难度。下面就介绍一下 <code>rpm</code> 的安装方式。rpm 是下载好编译好的包文件，所以就绕开了上述的两个问题。</p>
<p>1.安装环境如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">硬件</span><br><span class="line">2核1G的内网开发机</span><br><span class="line"></span><br><span class="line">软件</span><br><span class="line">➜  ~ cat /proc/version</span><br><span class="line">Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu Nov 19 22:10:57 UTC 2015</span><br><span class="line">➜  ~ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure>

<p>2.安装v8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -r v8</span><br><span class="line">yum install -y http://repo.okay.com.mx/centos/7/x86_64/release/okay-release-1-1.noarch.rpm</span><br><span class="line">#--nogpgcheck 禁掉GPG验证检查</span><br><span class="line">yum install -y v8 v8-devel --nogpgcheck</span><br></pre></td></tr></table></figure>

<p>3.检查是否安装完成。如果出现版本号说明已经安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ d8 -v</span><br><span class="line">V8 version 6.2.91</span><br><span class="line">d8&gt;</span><br></pre></td></tr></table></figure>

<p>4.复制文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/lib64/libv8* /usr/lib/</span><br></pre></td></tr></table></figure>

<p>剩下的就是安装 v8js 了，详见上面源码编译安装第五步。</p>
<p>经过测试，v8js 2.1.0（2018-01-07发布）版本可以成功安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ php --ri &quot;v8js&quot;</span><br><span class="line"></span><br><span class="line">v8js</span><br><span class="line"></span><br><span class="line">V8 Javascript Engine =&gt; enabled</span><br><span class="line">V8 Engine Compiled Version =&gt; 6.2.91</span><br><span class="line">V8 Engine Linked Version =&gt; 6.2.91</span><br><span class="line">Version =&gt; 2.1.0</span><br><span class="line"></span><br><span class="line">Directive =&gt; Local Value =&gt; Master Value</span><br><span class="line">v8js.flags =&gt; no value =&gt; no value</span><br><span class="line">v8js.icudtl_dat_path =&gt; no value =&gt; no value</span><br><span class="line">v8js.use_date =&gt; 0 =&gt; 0</span><br><span class="line">v8js.use_array_access =&gt; 0 =&gt; 0</span><br></pre></td></tr></table></figure>

<p>注：</p>
<p>v8js 2.1.1及以后版本会提示下面的错误，可能是 v8 的 6.2.91 不能满足最新的 v8js 的编译需求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checking for libv8_libplatform... configure: error: could not find libv8_libplatform library</span><br><span class="line">表示安装libv8-dev包的版本太低了。</span><br></pre></td></tr></table></figure>

<p><strong>参考文档</strong></p>
<ol>
<li><a href="https://www.cnblogs.com/lpbottle/p/install_gcc.html">如何在 Centos7 中安装 gcc</a></li>
<li><a href="https://blog.csdn.net/zpinsist/article/details/116762793">Centos7宝塔面板安装PHP V8js扩展</a></li>
<li><a href="https://github.com/phpv8/v8js/wiki/Installing-on-CentOS-7-x64---PHP-7.3">Installing on CentOS 7 x64 PHP 7.3</a></li>
<li><a href="https://linuxhostsupport.com/blog/how-to-install-gcc-on-centos-7/">How To Install GCC on CentOS 7</a></li>
<li><a href="https://pkgs.org/search/?q=v8">pkgs.org</a></li>
</ol>
]]></content>
      <tags>
        <tag>centos7</tag>
        <tag>v8js</tag>
        <tag>rpm</tag>
      </tags>
  </entry>
  <entry>
    <title>API签名设计</title>
    <url>/api-sign-design/</url>
    <content><![CDATA[<p>一. url请求的参数包括：timestamp，token, username，sign</p>
<p>1.timestamp: <br /><br>时间戮</p>
<p>2.token：<br /><br>登陆验证时，验证成功后，生成唯一的token（可以为uuid），并把token储存到缓存（redis）里 ，键为username,值为token</p>
<p>3.username:<br /><br>用户名,保证唯一</p>
<p>4.sign：<br /><br>规则：参数timestamp，token，username按字典排序，md5加密码（加点盐），后大写<br /><br>用户登陆，验证成功后，生成sign</p>
<p>二. url 拦截规则，验证</p>
<p>1.用户登陆，验证成功后，生成token，缓存（username-&gt;token）并返回给客户端<br>2.客户端每个接口请求（除登陆接口）时，传必要的参数timestamp,token,username, sign，没传直接返回报错</p>
<p>3.timestamp作用：是否在有效期内，有效期可以设置10，20分钟，根据需求设定<br /><br>比如说  过期时间设置为10分中<br /><br>服务接受到请求的当前时间戳是30，传过来的timestamp时间戳是10，30-10&gt;10, 说明这个请求过期</p>
<p>4.token作用：直接与redis中的username键值 对比，如果不相等，则过期，</p>
<p>在app开放接口API的设计中，避免不了的就是安全性问题。</p>
<p>一、HTTPS 协议</p>
<p>对于一些敏感的API接口，需要使用https协议。</p>
<p>https是在http超文本传输协议加入SSL层，它在网络间通信是加密的，所以需要加密证书。</p>
<p>二、签名设计</p>
<p>原理：用户登录后向服务器提供用户认证信息（如账户和密码），服务器认证完后给客户端返回一个Token令牌，用户再次获取信息时，带上此令牌，如果令牌正确，则返回数据。对于获取Token信息后，访问用户相关接口，客户端请求的url需要带上如下参数：</p>
<p>时间戳：timestamp</p>
<p>Token令牌：token</p>
<p>然后将所有用户请求的参数按照字母排序（包括timestamp，token），然后更具MD5加密（可以加点盐），全部大写，生成sign签名，这就是所说的url签名算法。然后登陆后每次调用用户信息时，带上sign，timestamp，token参数。</p>
<p>其最终的原理是减小明文的暴露次数；保证数据安全的访问。</p>
<p>具体实现如下：</p>
<ol>
<li>客户端向服务器端发送用户认证信息（用户名和密码），服务器端接收到请求后，验证用户信息是否正确。</li>
</ol>
<p>如果正确：则返回一个唯一不重复的字符串（一般为UUID），然后在Redis（任意缓存服务器）中维护Token—-Uid的用户信息关系，以便其他API对token的校验。</p>
<p>如果错误：则返回错误码。</p>
<p>2.服务器设计一个url请求拦截规则</p>
<p>（1）判断是否包含timestamp，token，sign参数，如果不含有返回错误码。</p>
<p>（2）判断服务器接到请求的时间和参数中的时间戳是否相差很长一段时间（时间自定义如半个小时），如果超过则说明该 url已经过期（如果url被盗，他改变了时间戳，但是会导致sign签名不相等）。</p>
<p>（3）判断token是否有效，根据请求过来的token，查询redis缓存中的uid，如果获取不到这说明该token已过期。</p>
<p>（4）根据用户请求的url参数，服务器端按照同样的规则生成sign签名，对比签名看是否相等，相等则放行。（自然url签名 也无法100%保证其安全，也可以通过公钥AES对数据和url加密，但这样无法确保公钥丢失，所以签名只是很大程度上保证安全）。</p>
<p>（5）此url拦截只需对获取身份认证的url放行（如登陆url），剩余所有的url都需拦截。</p>
<p>写一个生成 token 的方法（不对外公开），第一次调用时需要传参 secret 与 appid,对 secret 进行单向加密后存数据库，生成 uuid token 返回。做一个切点，api 请求校验 token,通过就继续执行，不通过就拦截。提供 refresh token 和 get token 方法，均需要提供 secret</p>
]]></content>
      <tags>
        <tag>api</tag>
        <tag>设计思路</tag>
      </tags>
  </entry>
  <entry>
    <title>在Centos7安装nginx1.21.1</title>
    <url>/Centos7-install-nginx1-21-1/</url>
    <content><![CDATA[<h5 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h5><p>首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++  pcre pcre-devel zlib zlib-devel openssl openssl--devel</span><br></pre></td></tr></table></figure>

<h5 id="二、安装Nginx"><a href="#二、安装Nginx" class="headerlink" title="二、安装Nginx"></a>二、安装Nginx</h5><p>安装之前，最好检查一下是否已经安装有nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -name nginx </span><br></pre></td></tr></table></figure>

<p>如果系统已经安装了nginx，那么就先卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure>

<p>然后开始安装<br>首先进入/usr/local目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure>

<p>从官网下载最新版的nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.21.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>注：版本号可更改，去官网查看最新版本号修改即可</p>
<p>解压nginx压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.21.1.tar.gz </span><br></pre></td></tr></table></figure>

<p>会产生一个nginx-1.21.1 目录，这时进入nginx-1.21.1 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd nginx-1.12.1</span><br></pre></td></tr></table></figure>

<p>接下来安装，使用–prefix参数指定nginx安装的目录,make、make install安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>注：默认安装在/usr/local/nginx，推荐使用默认设置</p>
<p>如果没有报错，顺利完成后，最好看一下nginx的安装目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whereis nginx </span><br></pre></td></tr></table></figure>

<h5 id="三、启动和停止nginx"><a href="#三、启动和停止nginx" class="headerlink" title="三、启动和停止nginx"></a>三、启动和停止nginx</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx </span><br><span class="line">./nginx -s stop</span><br><span class="line">./nginx -s quit</span><br><span class="line">./nginx -s reload</span><br><span class="line">./nginx -s quit: 此方式停止步骤是待nginx进程处理任务完毕进行停止。</span><br><span class="line">./nginx -s stop: 此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</span><br></pre></td></tr></table></figure>

<p>查询nginx进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure>

<h5 id="四、重启-nginx"><a href="#四、重启-nginx" class="headerlink" title="四、重启 nginx"></a>四、重启 nginx</h5><p>1.先停止再启动（推荐）：<br>对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s quit</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<p>2.重新加载配置文件：<br>当 nginx 的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用 -s reload 不用先停止 nginx 再启动 nginx 即可将配置信息在 nginx 中生效，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>

<p>启动成功后，在浏览器可以看到如下页面：</p>
<p><img src="https://www.jiangbianwanghai.com/img/nginx.png" alt="nginx" title="启动成功看到的画面"></p>
<h5 id="五、开机自启动"><a href="#五、开机自启动" class="headerlink" title="五、开机自启动"></a>五、开机自启动</h5><p>即在rc.local增加启动代码就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>增加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>

<p>到这里，nginx安装完毕，启动、停止、重启操作也都完成。</p>
]]></content>
      <tags>
        <tag>centos7</tag>
        <tag>源码安装</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>redis info 各个参数的详细说明</title>
    <url>/redis-info-chinese-meaning-of-parameters/</url>
    <content><![CDATA[<p>为了方便对redis进行监控管理，一些公司会自己开发监控，或在已有的系统中添加功能。对redis info信息的获取是必须要处理的。Redis Info信息包括Server,Clients,Memory,Persistence,Stats,Replication,CPU,Commandstats,Cluster,Keyspace等，下边我们结合一个项目的真实信息详细介绍各部分对应关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Server #服务器模块</span><br><span class="line">redis_version:5.0.5 #redis的版本是5.0.5</span><br><span class="line">redis_git_sha1:abc22daa Redis版本的哈希值</span><br><span class="line">redis_git_dirty:1</span><br><span class="line">redis_build_id:3ebe553cd2fe33fd</span><br><span class="line">redis_mode:standalone #运行模式：单机（集群）</span><br><span class="line">os:Linux #操作系统</span><br><span class="line">arch_bits:64 #操作系统位数</span><br><span class="line">multiplexing_api:epoll #redis所使用的事件处理机制</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:0.0.0 #gcc版本号</span><br><span class="line">process_id:11296 #当前 Redis 服务器进程id</span><br><span class="line">run_id:776c1721d5319d2e9fb9f776b2e04b5374ea1b83</span><br><span class="line">tcp_port:6379  #端口号</span><br><span class="line">uptime_in_seconds:20634790 #运行时间(秒)</span><br><span class="line">uptime_in_days:238 #运行时间(天)</span><br><span class="line">hz:10</span><br><span class="line">configured_hz:10</span><br><span class="line">lru_clock:2117525 #Redis的逻辑时钟</span><br><span class="line">executable:</span><br><span class="line">config_file:</span><br><span class="line">support_ptod:1</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line">connected_clients:14 #连接的客户端数量</span><br><span class="line">client_recent_max_input_buffer:4</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0 #阻塞的客户端数量</span><br><span class="line"></span><br><span class="line"># Memory</span><br><span class="line">used_memory:79262664 #使用内存（B）</span><br><span class="line">used_memory_human:75.59M #人类可读的格式的使用内容（MB）</span><br><span class="line">used_memory_rss:125497344 #系统给redis分配的内存（即常驻内存），这个值和top命令的输出一致</span><br><span class="line">used_memory_rss_human:119.68M #人类可读的格式的使用内容（MB）</span><br><span class="line">used_memory_peak:2159708488 #内存使用的峰值</span><br><span class="line">used_memory_peak_human:2.01G #人类可读的格式的使用内容（MB）</span><br><span class="line">used_memory_peak_perc:3.67% #使用内存达到峰值内存的百分比，即(used_memory/ used_memory_peak) *100%</span><br><span class="line">used_memory_overhead:42842930 #Redis为了维护数据集的内部机制所需的内存开销，包括所有客户端输出缓冲区、查询缓冲区、AOF重写</span><br><span class="line">used_memory_startup:4995912 #Redis服务器启动时消耗的内存</span><br><span class="line">used_memory_dataset:36419734 数据占用的内存大小，即used_memory-used_memory_overhead</span><br><span class="line">used_memory_dataset_perc:49.04% #数据占用的内存大小的百分比，100%*(used_memory_dataset/(used_memory-used_memory_startup))</span><br><span class="line">allocator_allocated:79684488</span><br><span class="line">allocator_active:86990848</span><br><span class="line">allocator_resident:136966144</span><br><span class="line">used_memory_lua:37888 #Lua脚本存储占用的内存</span><br><span class="line">used_memory_lua_human:37.00K #以更直观的可读格式显示Lua脚本存储占用的内存</span><br><span class="line">used_memory_scripts:0</span><br><span class="line">used_memory_scripts_human:0B</span><br><span class="line">number_of_cached_scripts:0</span><br><span class="line">maxmemory:2147483648 #Redis实例的最大内存配置</span><br><span class="line">maxmemory_human:2.00G #人类可读的格式的使用内容（MB）</span><br><span class="line">maxmemory_policy:volatile-lru</span><br><span class="line">allocator_frag_ratio:1.09</span><br><span class="line">allocator_frag_bytes:7306360</span><br><span class="line">allocator_rss_ratio:1.57</span><br><span class="line">allocator_rss_bytes:49975296</span><br><span class="line">rss_overhead_ratio:0.92</span><br><span class="line">rss_overhead_bytes:-11468800</span><br><span class="line">mem_fragmentation_ratio:1.58 #内存的碎片率，used_memory_rss/used_memory   --4.0版本之后可以使用memory purge手动回收内存</span><br><span class="line">mem_fragmentation_bytes:46234936</span><br><span class="line">mem_not_counted_for_evict:3700</span><br><span class="line">mem_replication_backlog:33554432</span><br><span class="line">mem_clients_slaves:17042</span><br><span class="line">mem_clients_normal:338216</span><br><span class="line">mem_aof_buffer:3700</span><br><span class="line">mem_allocator:jemalloc-5.1.0 #内存分配器</span><br><span class="line">active_defrag_running:0 #表示没有活动的defrag任务正在运行，1表示有活动的defrag任务正在运行（defrag:表示内存碎片整理）</span><br><span class="line">lazyfree_pending_objects:0 #表示redis执行lazy free操作,在等待被实际回收内容的键个数</span><br><span class="line">oom_err_count:0</span><br><span class="line"></span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:29068603 #自启动起连接过的总数。如果连接过多，说明短连接严重或连接池使用有问题，需调研代码的连接设置</span><br><span class="line">total_commands_processed:582395773 #自启动起运行命令的总数</span><br><span class="line">instantaneous_ops_per_sec:5968 #每秒执行的命令数，相当于QPS</span><br><span class="line">instantaneous_write_ops_per_sec:2981</span><br><span class="line">instantaneous_read_ops_per_sec:2987</span><br><span class="line">total_net_input_bytes:174080973852 #网络入口流量字节数</span><br><span class="line">total_net_output_bytes:465560453466 #网络出口流量字节数</span><br><span class="line">instantaneous_input_kbps:152.13 # 网络入口kps</span><br><span class="line">instantaneous_output_kbps:44.70 # 网络出口kps</span><br><span class="line">rejected_connections:0 # 拒绝的连接个数，由于maxclients限制，拒绝新连接的个数</span><br><span class="line">rejected_connections_status:0</span><br><span class="line">sync_full:2 # 主从完全同步成功次数</span><br><span class="line">sync_partial_ok:1 # 主从部分同步成功次数</span><br><span class="line">sync_partial_err:1 # 主从部分同步失败次数</span><br><span class="line">expired_keys:8691520 # 自启动起过期的key的总数</span><br><span class="line">expired_stale_perc:0.00</span><br><span class="line">expired_time_cap_reached_count:0</span><br><span class="line">evicted_keys:779165 # 使用内存大于maxmemory后，淘汰的key的总数</span><br><span class="line">evicted_keys_per_sec:0</span><br><span class="line">keyspace_hits:48424220 # 在main dictionary字典中成功查到的key个数</span><br><span class="line">keyspace_misses:15231242 # 同上，未命中的key的个数</span><br><span class="line">hits_per_sec:4</span><br><span class="line">misses_per_sec:0</span><br><span class="line">hit_rate_percentage:100.00</span><br><span class="line">pubsub_channels:0 #发布/订阅频道数</span><br><span class="line">pubsub_patterns:0 #发布/订阅模式数</span><br><span class="line">latest_fork_usec:7571 #上次的fork操作使用的时间（单位ms）</span><br><span class="line">migrate_cached_sockets:0 #是否已经缓存了到该地址的连接</span><br><span class="line">slave_expires_tracked_keys:0 #从实例到期key数量</span><br><span class="line">active_defrag_hits:0 #主动碎片整理命中次数</span><br><span class="line">active_defrag_misses:0 #主动碎片整理未命中次数</span><br><span class="line">active_defrag_key_hits:0 #主动碎片整理key命中次数</span><br><span class="line">active_defrag_key_misses:0 #主动碎片整理key未命中次数</span><br><span class="line">traffic_control_input:0</span><br><span class="line">traffic_control_input_status:0</span><br><span class="line">traffic_control_output:0</span><br><span class="line">traffic_control_output_status:0</span><br><span class="line">stat_avg_rt:0</span><br><span class="line">stat_max_rt:157</span><br><span class="line">pacluster_migrate_sum_rt:0</span><br><span class="line">pacluster_migrate_max_rt:0</span><br><span class="line">pacluster_migrate_qps:0</span><br><span class="line">pacluster_import_sum_rt:0</span><br><span class="line">pacluster_import_max_rt:0</span><br><span class="line">pacluster_import_qps:0</span><br><span class="line">pacluster_migrate_start_time:0</span><br><span class="line">pacluster_importing_start_time:0</span><br><span class="line">slot_psync_ok:0</span><br><span class="line">slot_psync_err:0</span><br><span class="line"></span><br><span class="line"># Replication</span><br><span class="line">role:master #当前实例的角色master还是slave</span><br><span class="line"></span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:15834.015191 #将所有redis主进程在核心态所占用的CPU时求和累计起来</span><br><span class="line">used_cpu_user:41037.999928 #将所有redis主进程在用户态所占用的CPU时求和累计起来</span><br><span class="line">used_cpu_sys_children:50.804649 #后台进程的核心态cpu使用率</span><br><span class="line">used_cpu_user_children:15.952634 #后台进程的用户态cpu使用率</span><br><span class="line"></span><br><span class="line"># Cluster</span><br><span class="line">cluster_enabled:0  #实例是否启用集群模式</span><br><span class="line">databases:256</span><br><span class="line">nodecount:1</span><br><span class="line"></span><br><span class="line"># paCluster</span><br><span class="line">pacluster_enabled:0</span><br><span class="line"></span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys=44930,expires=41583,avg_ttl=37019868443 #0号数据库中，有44930个键，其中有41583个是具有过期时间的键，平均的生存时间是37019868443毫秒</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>监控分析</tag>
      </tags>
  </entry>
  <entry>
    <title>基于微信的大转盘抽奖算法研究</title>
    <url>/wechat-large-turntable-algorithm/</url>
    <content><![CDATA[<p>基于微信的大转盘抽奖功能想必大家都体验过。那么，它们中奖的概率是怎么算的呢？</p>
<p>其实，抽奖的算法主要包含：</p>
<ol>
<li>中奖概率的问题。大奖概率不能过高，不然会亏本。中奖概率也不能过低，不然不利于推广。</li>
<li>用户人群的问题。奖项在什么时间会出现，如果出现的过早的活动的效果大打折扣，如果太晚可能奖品就发不完。</li>
<li>超发的问题。在并发情况下，可能存在A和B同时中奖的问题。</li>
</ol>
<p>基于上述问题。</p>
<p>设定时间线。奖品可以均匀的分步。</p>
<p>使用redis的原子性还解决并发和超发的问题。</p>
<p>抽中</p>
<p>扣奖品库存</p>
<p>直到奖项记录被写入记录表才能说明此用户获奖了。</p>
<h5 id="不可控"><a href="#不可控" class="headerlink" title="不可控"></a>不可控</h5><p>设定奖池大小，直接将奖品注入奖池。每抽一次，将此的奖券减少一张，直到奖券全部抽完，抽奖才算结束。</p>
<p>这个过程有可能奖品中完了，无效的奖券还没有抽完。</p>
<h5 id="可控"><a href="#可控" class="headerlink" title="可控"></a>可控</h5><p>设定一个奖池，奖池是带有时间戳。只有时间戳在这个范围内中奖的才能算中奖。</p>
<p>其实很简单</p>
<p>直接将奖品放入奖池，用随机数，如果随机数跟奖品匹配，则中奖。如果需要设定中奖是时间，可以先判断时间。<br>如果需要设置中奖的概率，也可以设定，参与人数达到多少出奖品。</p>
<p>上面是我一开始研究抽奖功能的思路，跟实际开发出的效果还是区别蛮大的。</p>
<p>最大的差异是摒弃了奖池的概念，虽然奖池是最接近模拟真实场景的，但这并不是一个好的思路。</p>
<p>开发一个抽奖产品，最重要的是可控。首先是奖项的中奖概率是可控的。</p>
<p>概率大一点儿，中奖的人数就多。概率小一点儿中奖的人数就少。</p>
<p>还是奖品投放数量的要求。可以随时追加奖品数量。</p>
<p>在真实的运营活动中，一个好的工具是可以帮助运营者达到活动目标效果的。</p>
<p>那么，中奖算法该怎么设计呢？</p>
<p>我是这么设计的</p>
<p>加入抽奖活动发布者，发布了一个活动，奖品分别是一等奖、二等奖、三等奖</p>
<p>那么，随机数的随机范围则是1-4，1代表一等奖，2代表二等奖，3代表三等奖，4代表空奖（谢谢参与）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rand(1, 4)</span><br></pre></td></tr></table></figure>
<p>如果活动参与者抽中4号则直接返回空奖，如果抽中2号，则按照2号的抽奖概率来计算随机数。</p>
<p>假设，2号的中奖概率是千分之47。那么，随机数的输出范围就是1-1000，如果输出的数字小于47则中奖，大于47则不中奖。</p>
<p>这样就能随意的调整中奖概率了。可大可小。下面是一段伪代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$rand = rand(1, 4);</span><br><span class="line">if ($rand == 2) &#123;</span><br><span class="line">    $rand = rand(1, 1000);</span><br><span class="line">    if ($rand &lt;= 47) &#123;</span><br><span class="line">        echo &#x27;恭喜你中奖了&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &#x27;谢谢参与&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &#x27;谢谢参与&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
